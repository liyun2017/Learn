安装
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"


创建版本库
$ mkdir learngit
$ cd learngit
$ pwd   //pwd命令用于显示当前目录/Users/michael/learngit 
初始化一个Git仓库，使用git init命令。如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见
添加文件到Git仓库，分两步：
使用命令git add <file>，注意，可反复多次使用，添加多个文件；// git add readme.txt
使用命令git commit -m <message>，完成。  // git commit -m "wrote a readme file" 


查看
要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。


版本回退
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


工作区和暂存区
工作区（Working Directory：就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区
版本库（Repository）：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
			Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

			
管理修改
每次修改，如果不用git add到暂存区，那就不会加入到commit中
那怎么提交第二次修改呢？你可以继续git add再git commit，也可以别着急提交第一次修改，先git add第二次修改，再git commit，就相当于把两次修改合并后一块提交了
第一次修改 -> git add -> 第二次修改 -> git add -> git commit


撤销修改
git checkout -- file可以丢弃工作区的修改   //git checkout -- readme.txt
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	总之，就是让这个文件回到最近一次git commit或git add时的状态。
命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区。
	git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


删除文件
通常直接在文件管理器中把没用的文件删了，或者用rm命令删了。//rm test.txt
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。



远程仓库
本地Git仓库和GitHub仓库之间的传输是通过SSH加密的
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件
		如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
			ssh-keygen -t rsa -C "youremail@example.com" //邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可
			一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
		然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
	注意：
		为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
		当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
		在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。


添加远程库
本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作
1.登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库
2.在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
3.GitHub上的这个learngit仓库还是空的，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库
	git remote add origin git@github.com:liyun2017/learngit.git   
		（liyun2017替换成你自己的GitHub账户名）
		远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
4.下一步，就可以把本地库的所有内容推送到远程库上：
	git push -u origin master 
		本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
		由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
			还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
			推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样。
		从现在起，只要本地作了提交，就可以通过命令: git push origin master  本地master分支的最新修改推送至GitHub
SSH警告
你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告:
	The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
	RSA key fingerprint is xx.xx.xx.xx.xx.
	Are you sure you want to continue connecting (yes/no)?
	这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
	Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了
	Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
小结：
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！


从远程库克隆
从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆
1.登陆GitHub，创建一个新的仓库，名字叫gitskills
	勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件
2.远程库已经准备好了，下一步是用命令git clone克隆一个本地库
	git clone git@github.com:liyun2017/gitskills.git
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。


分支管理
Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件
一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长
创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev，
	从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变
假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并
合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支

创建与合并分支
1.创建dev分支，然后切换到dev分支
	git checkout -b dev
	git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
		git branch dev
 		git checkout dev
2.用git branch命令查看当前分支
	git branch
	git branch命令会列出所有分支，当前分支前面会标一个*号,然后，我们就可以在dev分支上正常提交
3.dev分支的工作完成，我们就可以切换回master分支
	git checkout master
	切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变
4.现在，把dev分支的工作成果合并到master分支上
	git merge dev
	git merge命令用于合并指定分支到当前分支。
	Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快
5.合并完成后，就可以放心地删除dev分支了
	git branch -d dev
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


解决冲突
合并分支往往也不是一帆风顺的。
Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存
带参数的git log也可以看到分支的合并情况： git log --graph --pretty=oneline --abbrev-commit 命令可以看到分支合并图。
Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。


分支管理策略
合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息
准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward
	git merge --no-ff -m "merge with no-ff" dev
	因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去
	合并后，我们用git log看看分支历史
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。


Bug分支
软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除
当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交
并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。
git stash
1.首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支
	git checkout master
	git checkout -b issue-101
2.现在修复bug
	git add readme.txt 
	git commit -m "fix bug 101"
3.修复完成后，切换到master分支，并完成合并，最后删除issue-101分支
	git checkout master
	git merge --no-ff -m "merged bug fix 101" issue-101
4.接着回到dev分支干活
	git checkout dev
	git status
5.工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看
	git stash list
		工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
		一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
		另一种方式是用git stash pop，恢复的同时把stash内容也删了
	你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
		git stash apply stash@{0}
		

Feature分支
软件开发中，总有无穷无尽的新的功能要不断添加进来。
添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。
1.准备开发
	git checkout -b feature-vulcan
2.开发完毕
	git add vulcan.py
	git status
	git commit -m "add feature vulcan"
3.切回dev，准备合并
	git checkout dev
4.若新功能不用了，删除
	git branch -d feature-vulcan
	销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数
	git branch -D feature-vulcan
	

多人协作
当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。
要查看远程库的信息，用git remote
显示更详细的信息，用git remote -v

推送分支
推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上
git push origin master    要推送其他分支，比如dev则    git push origin dev
但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

抓取分支
多人协作时，大家都会往master和dev分支上推送各自的修改。
现在，模拟一个他，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆
git clone git@github.com:liyun2017/learngit.git
当他从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。不信可以用git branch命令看看
现在，他要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支 git checkout -b dev origin/dev
现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程 
	git add env.txt
	git commit -m "add env"
	git push origin dev
他已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送
	git push origin dev
推送失败，因为他的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送
	git pull
git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接
	git branch --set-upstream-to=origin/dev dev
再pull     git pull
这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push
	git commit -m "fix env conflict"
	git push origin dev

多人协作的工作模式通常是这样：
首先，可以试图用git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。

小结
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。


Rebase
多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后push的人不得不先pull，在本地合并，然后才能push成功
	每次合并再push后，分支变成了这样 git log --graph --pretty=oneline --abbrev-commit 查看，看上去很乱
rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了
rebase操作可以把本地未push的分叉提交历史整理成直线；
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比


标签管理
发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。
Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的
Git有commit，为什么还要引入tag：“请把上周一的那个版本打包发布，版本号是v1.2” “好的，按照tag v1.2查找commit就行！


创建标签
Git中打标签非常简单，首先，切换到需要打标签的分支上
	git branch
git tag <name>就可以打一个新标签
	git tag v1.0
git tag查看所有标签
	git tag
默认标签是打在最新提交的commit上的，如果忘了打标签，方法是找到历史提交的commit id，然后打上就可以
	git log --pretty=oneline --abbrev-commit
	git tag v0.9 f52c633    f52c633是对应的commit id
标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息
	git show v0.9
	用-a指定标签名，-m指定说明文字 git tag -a v0.1 -m "version 0.1 released" 1094adb
	用命令git show <tagname>可以看到说明文字 git show v0.1
标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签

小结
命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
命令git tag可以查看所有标签。


操作标签
标签打错了，也可以删除
	git tag -d v0.1
因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。如果要推送某个标签到远程，使用命令git push origin <tagname>
	git push origin v1.0
或者，一次性推送全部尚未推送到远程的本地标签：
	git push origin --tags
如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除
	git tag -d v0.9
	然后，从远程删除。删除命令也是push：   git push origin :refs/tags/v0.9

小结
命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。


使用GitHub
如何参与一个开源项目呢，访问项目主页，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：
	git clone git@github.com:liyun2017/bootstrap.git 
	

使用码云
使用GitHub时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况
可以使用国内的Git托管服务――码云（gitee.com）
使用码云和使用GitHub类似，我们在码云上注册账号并登录后，需要先上传自己的SSH公钥。选择右上角用户头像 -> 菜单“修改资料”，然后选择“SSH公钥”，填写一个便于识别的标题，然后把用户主目录下的.ssh/id_rsa.pub文件的内容粘贴进去



自定义Git
Git显示颜色，会让命令输出看起来更醒目
	git config --global color.ui true
	
忽略特殊文件
必须把某些文件放到Git工作目录中，但又不能提交它们，Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件

配置别名
st就表示status：	git config --global alias.st status

配置文件
配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。每个仓库的Git配置文件都放在.git/config文件中

搭建Git服务器
搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。
第一步，安装git：
	sudo apt-get install git
第二步，创建一个git用户，用来运行git服务：
	sudo adduser git
第三步，创建证书登录：
	收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
第四步，初始化Git仓库：
	先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令    sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git
	sudo chown -R git:git sample.git
第五步，禁用shell登录：
	出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行
	git:x:1001:1001:,,,:/home/git:/bin/bash 改为：git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
	这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出
第六步，克隆远程仓库：
	git clone命令克隆远程仓库了，在各自的电脑上运行
	git clone git@server:/srv/sample.git

管理公钥
管理权限
像SVN控制权限，用Gitolite