float ACECurveMeasurement::AngleControlXY(int index, int distance)
{
	int num = _curve->PointsNum();
	assert(index < num && index >= 0);
	assert(_cross.Size() >= num);

	ACEIdType p1 = _curve->Point(index - distance < 0 ? index - distance + num : index - distance);
	ACEIdType pm = _curve->Point(index);
	ACEIdType p2 = _curve->Point(index + distance > num - 1 ? index + distance - num : index + distance);

	ACEPointData d1;
	ACEPointData dm;
	ACEPointData d2;
	ACEPointData d;
	ACEPointDataArray& points = _data->Points();
	d1 = points[p1];
	dm = points[pm];
	d2 = points[p2];

	//d1.XYZ.X  d1.XYZ.Y   d2.XYZ.X  d2.XYZ.Y    dm.XYZ.X   dm.XYZ.Y
	double dx = d1.XYZ.X - d2.XYZ.X;
	double dy = d1.XYZ.Y - d2.XYZ.Y;
	double u = (dm.XYZ.X - d1.XYZ.X) * (d1.XYZ.X - d2.XYZ.X)
		+ (dm.XYZ.Y - d1.XYZ.Y) * (d1.XYZ.Y - d2.XYZ.Y);
	u = u / ((dx*dx) + (dy*dy));
	d.XYZ.X = d1.XYZ.X + u*dx;
	d.XYZ.Y = d1.XYZ.Y + u*dy;
	d.XYZ.Z = dm.XYZ.Z;

	ACEPointData c1;
	ACEPointData c2;
	c1 = Sub(d1, d);
	c2 = Sub(d2, d);
	Norm(c1);
	Norm(c2);
	auto angle = ACEMath::DegreesFromRadians(acos(Dot(c1, c2)));
	auto nd = NormDiff(index, distance);
	if (nd >= 90)
		angle = 360 - angle;
	return angle;
}

float ACECurveMeasurement::AngleControlXY(int p1, int p2, int p3)
{
	ACEIdType id1 = _curve->Point(p1);
	ACEIdType id2 = _curve->Point(p2);
	ACEIdType idm = _curve->Point(p3);

	ACEPointData d1;
	ACEPointData d2;
	ACEPointData dm;
	ACEPointData d;
	ACEPointDataArray & points = _data->Points();
	d1 = points[id1];
	d2 = points[id2];
	dm = points[idm];

	double dx = d1.XYZ.X - d2.XYZ.X;
	double dy = d1.XYZ.Y - d2.XYZ.Y;
	double u = (dm.XYZ.X - d1.XYZ.X)*(dx)+(dm.XYZ.Y - d1.XYZ.Y)*(dy);
	u = u / ((dx*dx) + (dy*dy));
	d.XYZ.X = d1.XYZ.X + u*dx;
	d.XYZ.Y = d1.XYZ.Y + u*dy;
	d.XYZ.Z = dm.XYZ.Z;

	ACEPointData c1;
	ACEPointData c2;
	c1 = Sub(d1, d2);
	c2 = Sub(d, d2);
	Norm(c1);
	Norm(c2);
	auto angle = ACEMath::DegreesFromRadians(acos(Dot(c1, c2)));
	return angle;

}








#pragma region 对大型凹陷进行分析
	analyze();      分析凹凸性-》找到最大的孔区域，获取曲线段里以及对应的点
	maxFailure = 2;    
	thresholdA = 0.1;    

	caveMarker.ResetValue(0);   caveMarker标记点对应num中小于法向量，大于角度阈值的点
	identfyCave(30, 4);	定义识别凹陷底部的方法：
						1.选取凹陷点，计算其与相隔step的两个凹陷点进行角度计算，角度计算方法为三个点垂直XY平面的夹角。
						2.去除噪声，考虑相邻凹陷的索引
						3.标记凹陷区域，法向量小于60的不为凹陷，角度大于250的为凹陷
	markCaveBottom();	找到bottom1,bottom2
				1.caveMarker标记的是凹陷， cavePosition 对应的是相邻边缘点是否同为凹陷，当前减去前一个
				2.cavePosition中第一个大于0的为first，将bottom1设置为first，并调用newcave设置CaveList，cavenum++
					开始边缘循环，当出现第二个大于0的时候，检查是否需要合并（仅当找到lastStop之后才合并）：
								当两个大于0的位置距离大于阈值的时候，更新bottom1，调用newcave设置CaveList，cavenum++
								当小于阈值的时候，合并，将bottom2设置为-1，调用newcave设置CaveList，cavenum++
								当出现第一个小于0的时候，将bottom2设置为当前位置，即lastStop
				3.bottom1代表的是平凹区域，当前减去前一个，凹减平，2-0=2
				  bottom2代表的是凹平区域，平减凹，0-2=-2
	success = checkCaveBottom();	  检查所有凹陷并检查其边界	

	//TODO:IMPORTANT:这里还需要另外一个判断条件。
	//原始凹陷区域的整体法向量与轮询到的点与凹陷区域内边界组成三角形的的法向量差异
	//或者：颠倒凹陷区域拟合面的距离
	//如果太远，则结束

	//for (int i = 0; i < caveList.size();){
	//	if (points[caveList[i].Bottom1].Value[1] * points[caveList[i].Bottom2].Value[1] < 0){
	//		caveList.erase(caveList.begin() + i);
	//		cavenum--;
	//	}
	//	else
	//	{
	//		i++;
	//	}
	//}
	if (success)
		markCaveTop(false, false);   	//查找并识别凹陷上边界
	crown = dataManager[_currentToothIndex].GetMergeData();

#if 1//DEBUG_FOR_CONVEXITY
	angles5.ResetValue(0);
	for (int p = 0; p < num; p++)
	{
		auto id = curve->Point(p);
		angles5[id] = caveMarker[p];
	}
	DebugUtil::ShowColorfulActor(CROWN_CURRENT, angles5, -2, 2, 5, false); //Debug显示
	DebugUtil::ShowRenderer(CROWN_CURRENT, "cave list -- big");
#endif
#pragma endregion 对大型凹陷进行处理

	_smartJawVzData->ReloadCrowns();
	_display->Update();

	//大型凹陷两端作为搭桥点
	_smartJawData->BridgePoint_L[_currentToothIndex][0] = -1;
	_smartJawData->BridgePoint_L[_currentToothIndex][1] = -1;
	_smartJawData->BridgePoint_R[_currentToothIndex][0] = -1;
	_smartJawData->BridgePoint_R[_currentToothIndex][1] = -1;

	if (caveList.empty()) return;
	points = crown->Points();
	auto lv = curve->GetVector();

	//筛选大型凹陷：选取凹陷区域端点y坐标平均值最大和最小的
	int max_id, min_id;
	{
		int n1 = curve->PointsNum();
		
		int i = 0;
		while ((caveList[i].Top2 - caveList[i].Top1 + n1) % n1 < 15) i++;
		max_id = min_id = i;
		int mid = mid = (caveList[i].Bottom1 + (caveList[i].Bottom2 - caveList[i].Bottom1 + lv.size()) % lv.size() / 2) % lv.size(); //找到bottom1和bottom2的中点
		float aver = points[lv[mid]].Value[1];//得到Y坐标  value为{X,Y,Z} points.XYZ.X
		float max_val, min_val;
		max_val = min_val = aver;
		i++;
		for (; i < caveList.size(); i++){
			if ((caveList[i].Top2 - caveList[i].Top1 + n1) % n1 < 15) continue;
			mid = mid = (caveList[i].Bottom1 + (caveList[i].Bottom2 - caveList[i].Bottom1 + lv.size()) % lv.size() / 2) % lv.size();
			aver = points[lv[mid]].Value[1];
			max_id = aver > max_val ? i : max_id;
			min_id = aver < min_val ? i : min_id;
			max_val = aver > max_val ? aver : max_val;
			min_val = aver < min_val ? aver : min_val;
		}
	}

	if (caveList.size() > 0){
		ProcessBridgePoint(caveList[max_id], lv);
		_smartJawData->BridgePoint_L[_currentToothIndex][0] = lv[caveList[max_id].Top1];
		_smartJawData->BridgePoint_R[_currentToothIndex][0] = lv[caveList[max_id].Top2];
	}
	if (caveList.size() > 1){
		ProcessBridgePoint(caveList[min_id], lv);
		_smartJawData->BridgePoint_L[_currentToothIndex][1] = lv[caveList[min_id].Top1];
		_smartJawData->BridgePoint_R[_currentToothIndex][1] = lv[caveList[min_id].Top2];
	}


	
	
#pragma region 定义分析凹凸性方法
	boost::shared_ptr<ACEMeshHoles> holes = boost::make_shared<ACEMeshHoles>(crown);
	int num;
	ACECurveMeasurement acm;  //用于基于ACECurve进行详尽的数据分析测量
	ACEPointDataArray& points = crown->Points();
	ACEFloatDataArray normAngles;
	ACEFloatDataArray angles;
	ACEFloatDataArray angles2;
	ACEFloatDataArray angles3;
	ACEFloatDataArray angles4;
	ACEFloatDataArray angles5;
	ACEFloatDataArray caveMarker;
	boost::shared_ptr<ACECurveOnMesh> curve;



分析凹凸性-》找到最大的孔区域，获取曲线段里以及对应的点
analyze();
	auto analyze = [&](){
		holes->Build();
		if (holes->NumOfCloseHoles() == 0)
			holes->TryFixConflictLine(true);
		//这里如果确信不等于零，可以用assert(holes->NumOfCloseHoles() != 0)
		//否则应该二次保护
		if (holes->NumOfCloseHoles() == 0) return;

		//找到最大孔区域
		int max_hid = 0;
		for (int hid = 1; hid < holes->NumOfCloseHoles(); hid++)
			if (holes->GetHoleCurve(max_hid)->PointsNum()
				< holes->GetHoleCurve(hid)->PointsNum()) max_hid = hid;
		curve = holes->GetHoleCurve(max_hid);

		assert(curve.get());
		acm = ACECurveMeasurement(crown, curve); //ACECurveMeasurement类里的数据 data curve 为 crown curve
		acm.Measure();  //？

		num = curve->PointsNum();  //获得曲线段里多少点

#if DEBUG_FOR_CONVEXITY
		DebugUtil::SetData(CROWN_CURRENT, crown);
#endif
#pragma region 查看法向量差异，判断凹凸性
		normAngles.SetSize(crown->Points().Size());  //设置法向量角度的尺寸
		normAngles.ResetValue(270); //初始化为270
		for (int p = 0; p < num; p++)
			normAngles[curve->Point(p)] = acm.NormDiff(p, 10);   //曲线段里的点对应的法向量角度  其他点为270

#if DEBUG_FOR_CONVEXITY
		DebugUtil::ShowColorfulActor(CROWN_CURRENT, normAngles, 45, 180, 6, false); //Debug显示
		DebugUtil::ShowRenderer(CROWN_CURRENT);
#endif

		//TODO此处结果似乎不准确
		angles.SetSize(crown->Points().Size()); 
		angles.ResetValue(-45);
		for (int p = 0; p < num; p++)
		{
			angles[curve->Point(p)] = acm.Angle0(p);  //曲线段里的点对应的角度(不考虑相邻面法向量) 其他为-45
		}

		for (int p = 0; p < num; p++)
		{
			angles[curve->Point(p)] = 180 - acm.Angle0(p);  //曲线段里的点对应的180-角度(不考虑相邻面法向量) 其他为-45
			if (acm.NormDiff(p) > 90) //NormDiff曲线法向量与面法向量的差异
				angles[curve->Point(p)] = 360 - angles[curve->Point(p)];  //曲线段里的点对应的360-角度(不考虑相邻面法向量) 其他为-45
		}

#if DEBUG_FOR_CONVEXITY
		for (int p = 0; p < num; p++)
		{
			if (angles[p] >= 190)
				angles[p] = 1;
			else
				if (angles[p] <= 170)
					angles[p] = -1;
				else
					angles[p] = 0;
		}
		DebugUtil::ShowColorfulActor(CROWN_CURRENT, angles, -1, 1, 3, false); //Debug显示
		DebugUtil::ShowRenderer(CROWN_CURRENT);
#endif
#pragma endregion 查看法向量差异，判断凹凸性

#pragma region 先识别凹区域，然后通过凹区域区域向两侧发散，得到待修补区域	

		angles2.SetSize(crown->Points().Size());  
		angles2.ResetValue(-45);  
		angles3.SetSize(crown->Points().Size());
		angles3.ResetValue(-2);
		angles4.SetSize(crown->Points().Size());
		angles4.ResetValue(0);
		angles5.SetSize(crown->Points().Size());
		angles5.ResetValue(0);
		caveMarker.SetSize(num);
		caveMarker.ResetValue(0);
	};
#pragma endregion 定义分析凹凸性方法




identfyCave(30, 4); 
定义识别凹陷底部的方法：
						1.选取凹陷点，计算其与相隔step的两个凹陷点进行角度计算，角度计算方法为三个点垂直XY平面的夹角。
						2.去除噪声，考虑相邻凹陷的索引
						3.标记凹陷区域，法向量小于60的不为凹陷，角度大于250的为凹陷
						
#pragma region 定义识别凹陷底部的方法
	//初步识别凹陷的底部区域并标记
	//TODO: 凹凸性的识别作为独立的算法，应该另外设计一个算法处理类进行处理
	auto identfyCave = [&](int step, int mergerange)
		//step: 从所选点，左右顺序跳过step数量的点，取三角形角度
		//mergerange: 考虑噪声，取凹陷区域时可左右延续若干点
		//			TODO: 注意：延续的点可能干扰后面修补位置。所以修补时需要特别考虑
	{
		angles2.SetSize(crown->Points().Size());
		angles2.ResetValue(-1);
		//角度计算
		for (int p = 0; p < num; p++)
			angles2[curve->Point(p)] = acm.Angle(p, step);

#if DEBUG_FOR_CONVEXITY
		//debug查看角度
		DebugUtil::ShowColorfulActor(CROWN_CURRENT, angles2, 0, 360, 9, false); //Debug显示
		char txt[32];
		sprintf_s(txt, "test angle %d", step);
		DebugUtil::ShowRenderer(CROWN_CURRENT, txt);
#endif
		angles3.SetSize(crown->Points().Size());
		//去除噪声
		for (int p = 0; p < num; p++)
		{
			auto id0 = curve->Point(p);		//初始angles3都为-2,id0为曲线段中在牙冠数据对应点的索引号
			angles3[id0] = angles2[2];  //在angles3中的索引为曲线段中在牙冠数据对应点的索引号 值对应的是angles2[2]的值 多为-1
			for (int c = -2; c <= 2; c++)  //-2 到 0循环
			{
				if (c == 0) continue;    
				auto id = curve->Point((p + c + num) % num);  //取余控制在num之内  即每次选取到该点的邻近两个点的曲线段中对应索引
				angles3[id0] = std::max(angles3[id0], angles2[id]);   //选取angles3和相邻angles2的最大值。确保不小于-2
			}
		}
		//标记凹陷区域    //法向量小于60（好像是小于240） angles3为0     角度大于240 angles3为2 cvmarker为2 
		for (int p = 0; p < num; p++)
		{
			auto id = curve->Point(p);
			if (normAngles[id] < 60)//基于法向量判断凹凸点 (考虑误差，应小于90度)
				angles3[id] = 0;
			else
				if (angles3[id] > 240)
				{
					angles3[id] = 2;
					caveMarker[p] = 2;   //caveMarker 标记的就是p处为凹陷
				}
				else angles3[id] = 0;
		}
#if DEBUG_FOR_CONVEXITY
		//效果显示
		DebugUtil::ShowColorfulActor(CROWN_CURRENT, angles3, 0, -1, 2, false); //Debug显示
		txt[32];
		sprintf_s(txt, "find cave per step %d", step);
		DebugUtil::ShowRenderer(CROWN_CURRENT, txt);
#endif
	};
	
	
	
	



#pragma region 定义凹陷区域表示方法
	std::vector<CavePosition> caveList;
	int cavenum = 0;
	auto newcave = [&](int t1, int b1, int b2, int t2)
	{
		CavePosition pos(t1, b1, b2, t2);
		caveList.push_back(pos);
		cavenum++;
	};
#pragma endregion 定义凹陷区域的表示方法
		CavePosition(int b1, int b2)
		{
			Top1 = -1;
			Top2 = -1;
	
			Bottom1 = b1;
			Bottom2 = b2;
	
			//Bound1 = Bottom2;
			//Bound2 = Bottom1;
		}
	
		CavePosition(int t1, int b1, int b2, int t2)
		{
			Top1 = t1;
			Bottom1 = b1;
			Bottom2 = b2;
			Top2 = t2;
		}


markCaveBottom();
				找到bottom1,bottom2
				1.caveMarker标记的是凹陷， cavePosition 对应的是相邻边缘点是否同为凹陷，当前减去前一个
				2.cavePosition中第一个大于0的为first，将bottom1设置为first，并调用newcave设置CaveList，cavenum++
					开始边缘循环，当出现第二个大于0的时候，检查是否需要合并（仅当找到lastStop之后才合并）：
								当两个大于0的位置距离大于阈值的时候，更新bottom1，调用newcave设置CaveList，cavenum++
								当小于阈值的时候，合并，将bottom2设置为-1，调用newcave设置CaveList，cavenum++
								当出现第一个小于0的时候，将bottom2设置为当前位置，即lastStop
				3.bottom1代表的是平凹区域，当前减去前一个，凹减平，2-0=2
				  bottom2代表的是凹平区域，平减凹，0-2=-2
				
	//相邻凹陷的距离不能太近
	//TODO:针对不同的凹陷检查区间，应该有不同的最小距离
	int minCaveBottomDistance = 8;
	//基于区域标记，提取凹陷列表
	auto markCaveBottom = [&]()
	{
		//找到所有凹区域的起始区域和结束区域
		//四个数字分别表示 出口开始位置，底部开始位置，底部结束位置，出口结束位置
		caveList.clear();
		cavenum = 0;
		ACEFloatDataArray cavePosition;
		cavePosition.SetSize(num);
		cavePosition.ResetValue(0);

		//标记起止点  caveMarker标记点对应num中小于法向量，大于角度阈值的点
		cavePosition[0] = caveMarker[0] - caveMarker[num - 1];
		for (int p = 1; p < num; p++)
		{
			cavePosition[p] = caveMarker[p] - caveMarker[p - 1];
		}
		//找到第一个凹陷的底部起始区域
		int first = -1;;
		for (int p = 0; p < num; p++)
		{
			if (cavePosition[p] > 0)
			{
				first = p;
				break;
			}
		}
		if (first == -1) return;

		//找到所有凹陷的底部起止区域
		int pos = (first + 1) % num;
		newcave(-1, first, -1, -1);
		int lastStop = -1;
		while (pos != first)
		{
			if (cavePosition[pos] > 0)
			{
				if (lastStop > 0) //检查是否需要合并
				{
					int diff = (pos - lastStop + num) % num;
					if (diff >= minCaveBottomDistance)
					{
						newcave(-1, pos, -1, -1);
					}
					else
					{
						caveList[cavenum - 1].Bottom2 = -1;
					}
				}
				else newcave(-1, pos, -1, -1);

			}
			else if (cavePosition[pos] < 0)
			{
				caveList[cavenum - 1].Bottom2 = pos;
				lastStop = pos;
			}
			pos = (pos + 1) % num;
		}
	};
	
	
	

success = checkCaveBottom();
		注意：std::vector<CavePosition> caveList;   CavePosition是结构体 代表4个点的
		caveList是按照cavenum出现的次数来进行赋值的，cavenum的值是调用newcave函数的次数，其存放着的都是每一次找到的与周围凹陷点无关的凹陷点
		caveList第一次是找到的第一个first凹陷点，最后一次找到的是lastStop凹陷点
		意味着caveList代表着多个底部区域的点，如果两个底部区域之间距离比较短，可以合并
	//检查所有凹陷并检查其边界
	auto checkCaveBottom = [&]()
	{
		//错误数据检查
		for each (auto cave in caveList)
			if (cave.Bottom1 == -1 || cave.Bottom2 == -1)
			{
				return false;
				//理论上不应该到达这里
				assert(false);
			}
		if (caveList.empty()) return false;

		//TODO
		//如果两个底部区域之间距离比较短，可以合并
		for (int i = 0; i < caveList.size();){
			int len = (caveList[(i + 1) % caveList.size()].Bottom1 - caveList[i].Bottom2 + num) % num;
			// 距离限制
			if (len < 5){
				caveList[i].Bottom2 = caveList[(i + 1) % caveList.size()].Bottom2;
				caveList.erase(caveList.begin() + (i + 1) % caveList.size());
				for (int j = 0; j < len; j++){
					caveMarker[(caveList[i-1].Bottom1 + j) % num] = 2.0;
				}
				cavenum--;
			}
			else
				i++;
		}

		//TODO
		//如果两个底部区域之间角度变化极小，可以合并
		return true;
	};
	
	
	
	
	
if (success)
	markCaveTop(false, false);
crown = dataManager[_currentToothIndex].GetMergeData();

	//查找并识别凹陷上边界
	auto markCaveTop = [&](bool widtheRestrict, bool fix)
	{
		if (caveList.size() == 0) return;

		for (int i = 0; i < cavenum - 1; i++)
		{
			findTopBetweenCave(caveList[i], caveList[i + 1], widtheRestrict);
		}
		//最后一段处理
		findTopBetweenCave(caveList[cavenum - 1], caveList[0], widtheRestrict);
		if (fix){
			for (int i = 0; i < cavenum; i++){
				BuildBridge(curve, caveList[i].Bottom1, caveList[i].Bottom2);
			}
		}
	};


//最后一段处理
findTopBetweenCave(caveList[i], caveList[i + 1], widtheRestrict);
findTopBetweenCave(caveList[cavenum - 1], caveList[0], widtheRestrict);
#pragma region 定义识别凹陷顶部的方法
				考虑角度，当前点与bottom1和bottom2对应垂直XY平面的角度
	//距离最宽点的临界宽度
	float deltawidth = 0.8;
	//thresholdA: 识别凹陷区域边界时使用的阈值。
	float thresholdA = 0.2;
	//通常该阈值表示对侧凹陷底部到曲线上点的角度变化速率
	//maxFailure: 为避免噪声，可能需要同时检测多个点，求最大差异
	int maxFailure = 2;
	//对相邻两个凹陷（可能时自己）之间的空白区域进行分析，分割到两个凹陷区域
	auto findTopBetweenCave = [&](CavePosition& cave1, CavePosition& cave2, bool widthRestrict)
	{ 
		int &idx1 = cave1.Top2;
		int &idx2 = cave2.Top1;
		idx1 = cave1.Bottom2;
		idx2 = (cave2.Bottom1 - 1) % num;

		assert(idx1 != idx2); //TODO 参见checkCaveBottom未完成部分，需要合并处理

		int failnum1 = 0;
		int failnum2 = 0;
		float lasta1 = 0;
		float lasta2 = 0;
		bool findt1 = false;
		bool findt2 = false;

		while ((!findt1 || !findt2) //查找是否完成
			&& idx1 != idx2) //位置是否碰撞
		{
			//从两侧向中间移动。如果两侧指针相遇，则结束移动
			if (!findt1)
			{
				idx1 = (idx1 + 1) % num;
				if (idx1 == idx2)
				{
					findt1 = findt2 = true;
					//回退
					idx1 = (idx1 + num - 1) % num;
				}
			}
			if (!findt2)
			{
				idx2 = (idx2 + num - 1) % num;
				if (idx1 == idx2)
				{
					findt2 = findt1 = true;
					//回退
					idx2 = (idx2 + 1) % num;
				}
			}
			//前向侧检查
			if (!findt1)
			{
				ACEPointData pd = crown->Points()[curve->Point(idx1)];
				auto a1 = acm.AngleControlXY(cave1.Bottom2, cave1.Bottom1, idx1);
				if (a1 - lasta1 < thresholdA)
				{
					failnum1++;
					if (failnum1 >= maxFailure)
						//结束探寻，找到终点
					{
						findt1 = true;
						//回退fail的点
						while (failnum1 > 0)
						{
							caveMarker[idx1] = 0;
							idx1 = (idx1 + num - 1) % num;
							failnum1--;
						}
						//回退到正确识别的区域
						idx1 = (idx1 + num - 1) % num;
						cave1.Top2 = idx1;
					}
					else
						caveMarker[idx1] = 1;
				}
				else
				{
					caveMarker[idx1] = 1;
					failnum1 = 0;
					lasta1 = a1;
				}
			}
			//后向侧检查
			if (!findt2)
			{
				ACEPointData pd = crown->Points()[curve->Point(idx2)];
				auto a2 = acm.AngleControlXY(cave2.Bottom1, cave2.Bottom2, idx2);
				if (a2 - lasta2 < thresholdA)
				{
					failnum2++;
					if (failnum2 >= maxFailure)
						//结束探寻，找到终点
					{
						findt2 = true;
						//回退fail的点
						while (failnum2 > 0)
						{
							caveMarker[idx2] = 0;
							idx2 = (idx2 + 1) % num;
							failnum2--;
						}
						//回退到正确识别的区域
						idx2 = (idx2 + 1) % num;
						cave2.Top1 = idx2;
					}

					else caveMarker[idx2] = -1;
				}
				else
				{
					caveMarker[idx2] = -1;
					failnum2 = 0;
					lasta2 = a2;
				}
			}
			//基于逻辑不应该相等，这里用于debug时检测
			assert(idx1 != idx2);
		}
	};

	
	

BuildBridge(curve, caveList[i].Bottom1, caveList[i].Bottom2);
void SmartJawService::BuildBridge(boost::shared_ptr<ACECurveOnMesh> curve, int idx1, int idx2){
	auto crown = dataManager[_currentToothIndex].GetMergeData();
	auto loop = curve->GetVector();
	std::vector<int> lv;
	
	//vector loop中需要插入点（bottom1 bottom2需要加入进去），即利用lv来插
	// Step1: idx1 -> idx2 加入lv
	for (int i = idx1; i != idx2; i = (i + 1) % loop.size())
		lv.push_back(loop[i]);
	lv.push_back(loop[idx2]);
	
	
	// Step2: idx2 -> idx1 插点,加入lv
	auto points = crown->Points();
	float *pd1 = points[loop[idx1]].Value, *pd2 = points[loop[idx2]].Value; //bottom1 bottom2的XYZ的坐标
	int num = (idx2 - idx1 + loop.size()) % loop.size();
	float delta[] = { (pd1[0] - pd2[0])/num, (pd1[1] - pd2[1])/num, (pd1[2] - pd2[2])/num };
	// 插入num - 1个点
	for (int i = 1; i < num; i++){
		float newp[] = { pd2[0] + delta[0] * i, pd2[1] + delta[1] * i, pd2[2] + delta[2] * i };
		int pid = crown->TryInsertPoint(newp);
		lv.push_back(pid);
	}

	auto data = FixSmallHole(crown, lv, 0, num); // 0, num 分别为idx1, idx2的位置
	dataManager[_currentToothIndex].Push(data);

	// 测试用,若dataManager类导致ACEMeshHoles找不到洞，可能是FixSmallHole函数导致
	auto mesh = dataManager[_currentToothIndex].GetMergeData();
	auto holes = new ACEMeshHoles(mesh);
	holes->Build();
	assert(holes->NumOfCloseHoles() == 1);

	//boost::shared_ptr<ACEMesh> acemesh = boost::make_shared<ACEMesh>(crown);
	//ACEIdType new_numcell = crown->Cells().Size();
	//for (int i = 0; i < new_numcell; i++)
	//	acemesh->IncludeCell(i);
	//ACEMeshDataToMatrix(acemesh, lv);

	//ACESTLWriter writer;
	//writer.WriteSTLFile("Sample\\test_smallhole.stl", crown);
}


	
	
ProcessBridgePoint(caveList[max_id], lv);
void SmartJawService::ProcessBridgePoint(CavePosition &cave, const std::vector<int> lv){
	auto crown = dataManager[_currentToothIndex].GetMergeData();
	auto points = crown->Points();

	// 再次判断凹陷区域是否达到宽度条件，不达到条件的强制回缩
	// 假设top1->top2都是遵循右手定则
	float maxDelta = 1.1;
	int mid = (cave.Bottom1 + (cave.Bottom2 - cave.Bottom1 + lv.size()) % lv.size() / 2) % lv.size();
	float y_max = points[lv[mid]].Value[1];   mid的Y坐标
	//高度大于阈值，回缩
	if (y_max > 0.0){
		//for (int i = cave.Top1; i != cave.Top2; i = (i + 1) % lv.size())
		//	y_max = points[lv[i]].Value[1] > y_max ? points[lv[i]].Value[1] : y_max;

		// 回缩top1点
		while (y_max - points[lv[cave.Top1]].Value[1] > maxDelta){     
			if (cave.Bottom1 == cave.Top1)
				cave.Bottom1 = (cave.Bottom1 + 1) % lv.size();
			cave.Top1 = (cave.Top1 + 1) % lv.size();
		}
		// 回缩top2点
		while (y_max - points[lv[cave.Top2]].Value[1] > maxDelta){
			if (cave.Bottom2 == cave.Top2)
				cave.Bottom2 = (cave.Bottom2 + 1) % lv.size();
			cave.Top2 = (cave.Top2 + lv.size() - 1) % lv.size();
		}
	}
	else{
		//for (int i = cave.Top1; i != cave.Top2; i = (i + 1) % lv.size())
		//	y_max = points[lv[i]].Value[1] < y_max ? points[lv[i]].Value[1] : y_max;

		// 回缩top1点
		while (points[lv[cave.Top1]].Value[1] - y_max > maxDelta){
			if (cave.Bottom1 == cave.Top1)
				cave.Bottom1 = (cave.Bottom1 + 1) % lv.size();
			cave.Top1 = (cave.Top1 + 1) % lv.size();
		}
		// 回缩top2点
		while (points[lv[cave.Top2]].Value[1] - y_max > maxDelta){
			if (cave.Bottom2 == cave.Top2)
				cave.Bottom2 = (cave.Bottom2 + lv.size() - 1) % lv.size();
			cave.Top2 = (cave.Top2 + lv.size() - 1) % lv.size();
		}
	}


}

	
	
	
	
	
	
	
#pragma region 先对微小结构进行处理
	//analyze();
	//maxFailure = 1;
	//thresholdA = 0.25;
	//identfyCave(2, 1);
	//markCaveBottom();
	//success = checkCaveBottom(false);
	//if (success)
	//	markCaveTop(false, true);
	//crown = dataManager[_currentToothIndex].GetMergeData();

//#if 1//DEBUG_FOR_CONVEXITY
//	angles5.SetSize(crown->Points().Size());
//	angles5.ResetValue(0);
//	for (int p = 0; p < num; p++)
//	{
//		auto id = curve->Point(p);
//		angles5[id] = caveMarker[p];
//	}
//	DebugUtil::SetData(CROWN_CURRENT, crown);
//	DebugUtil::ShowColorfulActor(CROWN_CURRENT, angles5, -2, 2, 5, false); //Debug显示
//	DebugUtil::ShowRenderer(CROWN_CURRENT, "cave list -- trival");
//#endif
	//ConfirmCaveBoundary();
#pragma endregion 先对微小结构进行处理

#pragma region 对小型凹陷进行处理     在调用markCaveTop的时候，传入的true，进行了调用BuildBridge来进行搭桥 连接小区域（可尝试补洞）
	analyze();
	identfyCave(4, 2);
	markCaveBottom();
	success = checkCaveBottom();
	if (success)
		markCaveTop(false, true);
	crown = dataManager[_currentToothIndex].GetMergeData();

#if 1//DEBUG_FOR_CONVEXITY
	angles5.SetSize(crown->Points().Size());
	angles5.ResetValue(0);
	for (int p = 0; p < num; p++)
	{
		auto id = curve->Point(p);
		angles5[id] = caveMarker[p];
	}
	DebugUtil::SetData(CROWN_CURRENT, crown);
	DebugUtil::ShowColorfulActor(CROWN_CURRENT, angles5, -2, 2, 5, false); //Debug显示
	DebugUtil::ShowRenderer(CROWN_CURRENT, "cave list -- small");
#endif
	//ConfirmCaveBoundary();
#pragma endregion 先对小型凹陷进行处理
	